  WORD        wMode;               // 0x0001 = do white balance on next transmitted image
                                   // other values reserved for future use

  WORD        wParam[4];           // not used now, meaning will depend on wMode

  BYTE        bCks;                // checksum byte
} SC2_White_Balance_Response;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  BYTE        bCks;                // checksum byte
} SC2_Get_White_Balance_Status;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wStatus;             // 0x0001 = do white balance on next transmitted image
  WORD        wColorTemp;
  SHORT       sTint;
  WORD        wReserved[4];        // not used now, meaning will depend on wMode
  BYTE        bCks;                // checksum byte
} SC2_White_Balance_Status_Response;



/////////////////////////////////////////////////////////////////////
// Telegram structures for HD/SDI image transfer
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  WORD        wInterface;
  WORD        wMode;
  WORD        wSpeed; 
  DWORD       dwRangeLow; 
  DWORD       dwRangeHigh;
  DWORD       dwStartPos;
  BYTE        bCks;                    // checksum byte
} SC2_Play_Images_from_Segment;

#define SC2_Play_Images_from_Segment_Response SC2_Play_Images_from_Segment


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Get_Play_Position;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wStatus;                 // current status
  DWORD       dwPosition;              // current play position
  BYTE        bCks;                    // checksum byte
} SC2_Get_Play_Position_Response;	


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  WORD        wMode1;
  WORD        wMode2;
  DWORD       dwSetPos1; 
  DWORD       dwClrPos1; 
  DWORD       dwSetPos2; 
  DWORD       dwClrPos2; 
  DWORD       dwSetPos3; 
  DWORD       dwClrPos3; 
  DWORD       dwSetPos4; 
  DWORD       dwClrPos4; 
  BYTE        bCks;                    // checksum byte
} SC2_Set_Video_Payload_Identifier;

#define SC2_Set_Video_Payload_Identifier_Response SC2_Set_Video_Payload_Identifier


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wInterface;
  BYTE        bCks;                    // checksum byte
} SC2_Get_Interface_Output_Format;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wInterface;
  WORD        wFormat;
  WORD        wReserved1; 
  WORD        wReserved2; 
  BYTE        bCks;                    // checksum byte
} SC2_Set_Interface_Output_Format;

#define SC2_Set_Interface_Output_Format_Response SC2_Set_Interface_Output_Format
#define SC2_Get_Interface_Output_Format_Response SC2_Set_Interface_Output_Format


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wInterface;
  BYTE        bCks;                    // checksum byte
} SC2_Get_Interface_Status;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wInterface;
  WORD        wReserved0;
  DWORD       dwWarnings;              // Warnings, bit flags
  DWORD       dwErrors;                // Errors,   bit flags
  DWORD       dwStatus;                // Status info, bit flags
    // Note: Meaning of dwWarnings, dwErrors and dwStatus will
    //       depend on selected interface!
  DWORD       dwReserved[4];           
  BYTE        bCks;                    // checksum byte
} SC2_Get_Interface_Status_Response;


typedef struct
{
  WORD        wCode;               // telegram code 
  WORD        wSize;               // telegram length
  BYTE        bCks;                // checksum byte
} SC2_Get_Image_Transfer_Mode;

typedef struct
{
  WORD        wCode;               // telegram code 
  WORD        wSize;               // telegram length
  WORD        wMode;               // transfer mode, e.g. full, scaled, cutout etc.
  WORD        wImageWidth;         // original image width
  WORD        wImageHeight;        // original image height
  WORD        wTxWidth;            // width of transferred image (scaled or cutout)
  WORD        wTxHeight;           // width of transferred image (scaled or cutout)
  WORD        wTxLineWordCnt;      // Number of WORDs of a line (padded, if not divisible by two)
  WORD        wParam[8];           // word params, meaning depends on selected mode
  BYTE        bCks;                // checksum byte
} SC2_Set_Image_Transfer_Mode;

typedef struct
{
  WORD        wCode;               // telegram code 
  WORD        wSize;               // telegram length
  WORD        wMode;               // transfer mode, e.g. full, scaled, cutout etc.
  WORD        wImageWidth;         // original image width
  WORD        wImageHeight;        // original image height
  WORD        wTxWidth;            // width of transferred image (scaled or cutout)
  WORD        wTxHeight;           // width of transferred image (scaled or cutout)
  WORD        wTxLineWordCnt;      // Number of WORDs of a line (padded, if not divisible by two)
  WORD        wParam[8];           // word params, meaning depends on selected mode
  BYTE        bCks;                // checksum byte
} SC2_Image_Transfer_Mode_Response;



/////////////////////////////////////////////////////////////////////
// "Interrupt" Messages sent from camera to PC
/////////////////////////////////////////////////////////////////////

//#define SC2_Image_Avail_Message           SC2_Simple_Telegram
//#define SC2_No_Image_Avail_Message        SC2_Simple_Telegram
//#define SC2_Record_Off_Message            SC2_Simple_Telegram

typedef struct
{
  WORD        wCode;               // telegram code
  WORD        wSize;               // telegram length
  DWORD       dwImageDataCount;    // number of image data in byte, which is sent to the host
  BYTE        bCks;                // checksum byte
} SC2_Image_Transfer_Done_Message;



/////////////////////////////////////////////////////////////////////
// pco.flim Configuration/Control
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD wCode;           // telegram code
  WORD wSize;           // telegram length
  WORD wSourceSelect;   // modulation source (internal/external)
  WORD wOutputWaveform; // modulation output waveform
  WORD wReserved1;      // reserved for future use
  WORD wReserved2;      // reserved for future use
  BYTE bCks;            // checksum byte
} SC2_FLIM_Modulation_Params;

#define SC2_Set_FLIM_Modulation_Params          SC2_FLIM_Modulation_Params
#define SC2_Set_FLIM_Modulation_Params_Response SC2_FLIM_Modulation_Params

#define SC2_Get_FLIM_Modulation_Params          SC2_Simple_Telegram
#define SC2_Get_FLIM_Modulation_Params_Response SC2_FLIM_Modulation_Params

typedef struct
{
  WORD wCode;          // telegram code
  WORD wSize;          // telegram length
  WORD wPhaseNumber;   // number of phases per modulation period
  WORD wPhaseSymmetry; // modulation taps gather each phase information singularly by the appropriate tap or symmetrically by both taps
  WORD wPhaseOrder;    // recording order of (symmetrically) gathered phases
  WORD wTapSelect;     // additional selection of one of both or both taps
  WORD wReserved1;     // reserved for future use
  WORD wReserved2;     // reserved for future use
  BYTE bCks;           // checksum byte
} SC2_FLIM_Phase_Sequence_Params;

#define SC2_Set_FLIM_Phase_Sequence_Params          SC2_FLIM_Phase_Sequence_Params
#define SC2_Set_FLIM_Phase_Sequence_Params_Response SC2_FLIM_Phase_Sequence_Params

#define SC2_Get_FLIM_Phase_Sequence_Params          SC2_Simple_Telegram
#define SC2_Get_FLIM_Phase_Sequence_Params_Response SC2_FLIM_Phase_Sequence_Params

typedef struct
{
  WORD wCode;                // telegram code
  WORD wSize;                // telegram length
  WORD wAsymmetryCorrection; // averaging mode of both taps holding the same phase information
  WORD wCalculationMode;     // reserved for future use (method/parameters for phasor calculation etc.)
  WORD wReferencingMode;     // reserved for future use (sequence is stored as reference, reference is used etc.)
  WORD wThresholdLow;        // reserved for future use (lower threshold for clipping calculated pixel data containing no information)
  WORD wThresholdHigh;       // reserved for future use (upper threshold for clipping calculated pixel data containing no information)
  WORD wOutputMode;          // reserved for future use (image output format and types)
  WORD wReserved1;           // reserved for future use
  WORD wReserved2;           // reserved for future use
  WORD wReserved3;           // reserved for future use
  WORD wReserved4;           // reserved for future use
  BYTE bCks;                 // checksum byte
} SC2_FLIM_Image_Processing_Flow;

#define SC2_Set_FLIM_Image_Processing_Flow          SC2_FLIM_Image_Processing_Flow
#define SC2_Set_FLIM_Image_Processing_Flow_Response SC2_FLIM_Image_Processing_Flow

#define SC2_Get_FLIM_Image_Processing_Flow          SC2_Simple_Telegram
#define SC2_Get_FLIM_Image_Processing_Flow_Response SC2_FLIM_Image_Processing_Flow

typedef struct
{
  WORD  wCode;       // telegram code
  WORD  wSize;       // telegram length
  DWORD dwFrequency; // modulation frequency in Hz
  BYTE  bCks;        // checksum byte
} SC2_FLIM_Master_Modulation_Frequency;

#define SC2_Set_FLIM_Master_Modulation_Frequency          SC2_FLIM_Master_Modulation_Frequency
#define SC2_Set_FLIM_Master_Modulation_Frequency_Response SC2_FLIM_Master_Modulation_Frequency

#define SC2_Get_FLIM_Master_Modulation_Frequency          SC2_Simple_Telegram
#define SC2_Get_FLIM_Master_Modulation_Frequency_Response SC2_FLIM_Master_Modulation_Frequency

/*
typedef struct
{
  WORD  wCode;           // telegram code
  WORD  wSize;           // telegram length
  DWORD dwFrequency[16]; // modulation frequency table in Hz
  BYTE  bCks;            // checksum byte
} SC2_FLIM_Master_Modulation_Frequency_Table;

#define SC2_Set_FLIM_Master_Modulation_Frequency_Table          SC2_FLIM_Master_Modulation_Frequency_Table
#define SC2_Set_FLIM_Master_Modulation_Frequency_Table_Response SC2_FLIM_Master_Modulation_Frequency_Table

#define SC2_Get_FLIM_Master_Modulation_Frequency_Table          SC2_Simple_Telegram
#define SC2_Get_FLIM_Master_Modulation_Frequency_Table_Response SC2_FLIM_Master_Modulation_Frequency_Table
*/

typedef struct
{
  WORD  wCode;           // telegram code
  WORD  wSize;           // telegram length
  DWORD dwPhaseMilliDeg; // relative phase between image sensor and modulation signal in milli-degrees
  BYTE  bCks;            // checksum byte
} SC2_FLIM_Relative_Phase;

#define SC2_Set_FLIM_Relative_Phase          SC2_FLIM_Relative_Phase
#define SC2_Set_FLIM_Relative_Phase_Response SC2_FLIM_Relative_Phase

#define SC2_Get_FLIM_Relative_Phase          SC2_Simple_Telegram
#define SC2_Get_FLIM_Relative_Phase_Response SC2_FLIM_Relative_Phase



#if defined(WIN32) || defined(__linux__)
//#pragma message("Structures packed back to normal!")
#pragma pack(pop)  
#endif



#ifdef __MICROBLAZE__
#undef struct
#endif

#ifdef _PIC32_
#undef struct
#endif

#endif  // -- ifndef SC2_TELEGRAM_H --------------------------------------- //


//-----------------------------------------------------------------//
// Name        | VersionNo.h                 | Type: ( ) source    //
//-------------------------------------------|       (*) header    //
// Project     | PCO                         |       ( ) others    //
//-----------------------------------------------------------------//
// Platform    | Linux                                             //
//-----------------------------------------------------------------//
// Environment | Linux GCC                                         //
//-----------------------------------------------------------------//
// Purpose     | PCO - Version number definition                   //
//-----------------------------------------------------------------//
// Author      | MBL PCO AG                                        //
//-----------------------------------------------------------------//
// Revision    |                                                   //
//-----------------------------------------------------------------//
// Notes       |                                                   //
//             |                                                   //
//-----------------------------------------------------------------//
// (c) 2010 - 2012 PCO AG                                          //
// Donaupark 11 D-93309  Kelheim / Germany                         //
// Phone: +49 (0)9441 / 2005-0   Fax: +49 (0)9441 / 2005-20        //
// Email: info@pco.de                                              //
//-----------------------------------------------------------------//


//-----------------------------------------------------------------//
// Revision History:                                               //
//-----------------------------------------------------------------//
// Rev.:     | Date:      | Changed:                               //
// --------- | ---------- | ---------------------------------------//
//  01.01    | 09.08.2010 |  new file, MBL                         //
//-----------------------------------------------------------------//


#ifndef VERS_NO_H
#define VERS_NO_H

#define VERSION 1
#define SUBVERSION 2
#define SUBAGE 02

#endif
