  WORD          wCode;                   // telegram code
  WORD          wSize;                   // telegram length
  WORD          wLutNumber;              // number of LUTs
  SC2_LUT_DESC  LutDesc[10];
  BYTE          bCks;                    // checksum byte
} SC2_Get_Lookuptable_Info_Response;


typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wIdentifier;             // define LUT to be activated, 0x0000 for no LUT
  WORD        wParameter;              // optional parameter
  BYTE        bCks;
} SC2_Set_Lookuptable;

#define SC2_Set_Lookuptable_Response SC2_Set_Lookuptable
#define SC2_Get_Lookuptable          SC2_Simple_Telegram
#define SC2_Get_Lookuptable_Response SC2_Set_Lookuptable


typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wIdentifier;             // define LUT to be loaded
  WORD        wPacketNum;              // for loading LUT in several steps
  WORD        wFormat;                 // data structure in *bData (see defines)
  WORD        wLength;                 // valid number of bytes within this call
  BYTE        bData[256];
  BYTE        bCks;                    // checksum byte
} SC2_Load_Lookuptable;

//  NOTE:
//    no additional parameters as max. telegram length is already reached!


typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wIdentifier;             // define LUT to be loaded
  WORD        wPacketNum;              // for loading LUT in several steps
  WORD        wFormat;                 // data structure in *bData (see defines)
  WORD        wLength;                 // valid number of bytes within this call
  BYTE        bCks;                    // checksum byte
} SC2_Load_Lookuptable_Response;


typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wIdentifier;             // define LUT to be loaded
  WORD        wPacketNum;              // for loading LUT in several steps
  BYTE        bCks;                    // checksum byte
} SC2_Read_Lookuptable;

typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wIdentifier;             // define LUT to be loaded
  WORD        wPacketNum;              // for loading LUT in several steps
  WORD        wFormat;                 // data structure in *bData (see defines)
  WORD        wLength;                 // valid number of bytes within this call
  BYTE        bData[256];
  BYTE        bCks;                    // checksum byte
} SC2_Read_Lookuptable_Response;

//  NOTE:
//    no additional parameters as max. telegram length is already reached!


/////////////////////////////////////////////////////////////////////
// cooling setpoint commands, belongs to sensor related commands (edge)
/////////////////////////////////////////////////////////////////////


typedef struct
{
  WORD        wCode;                                    // telegram code 
  WORD        wSize;                                    // telegram length
  WORD        wBlockID;                                 // current block ID; usually 0; in case more than 10 setpoints are valid use next block
  BYTE        bCks;                                     // checksum byte
} SC2_Get_Cooling_Setpoints;

typedef struct
{
  WORD        wCode;                                    // telegram code 
  WORD        wSize;                                    // telegram length
  WORD        wBlockID;                                 // current block ID; usually 0; in case more than 10 setpoints are valid use next block
  WORD        wValidSetPoints;                          // number of valid setpoints; if (valid / 10) > 0 query next block(s)
  SHORT       sSetPoints[10];
  BYTE        bCks;                                     // checksum byte
} SC2_Get_Cooling_Setpoints_Response;


/////////////////////////////////////////////////////////////////////
// timing control 
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wTimebaseDelay;
  WORD        wTimebaseExposure;
  BYTE        bCks;                    // checksum byte
} SC2_Timebase_Response;

#define SC2_Set_Timebase SC2_Timebase_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwDelay;
  DWORD       dwExposure;
  BYTE        bCks;                    // checksum byte
} SC2_Delay_Exposure_Response;

#define SC2_Set_Delay_Exposure SC2_Delay_Exposure_Response


typedef struct 
{
  DWORD       dwDelay;
  DWORD       dwExposure;
} SC2_Delay_Exposure_pair;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  SC2_Delay_Exposure_pair delexp[16];
  BYTE        bCks;                    // checksum byte
} SC2_Delay_Exposure_Table_Response;

#define SC2_Set_Delay_Exposure_Table SC2_Delay_Exposure_Table_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // mode to be set
  BYTE        bCks;                    // checksum byte
} SC2_Set_FPS_Exposure_Mode;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // current mode
  DWORD       dwExposure;
  BYTE        bCks;                    // checksum byte
} SC2_FPS_Exposure_Mode_Response;

#define SC2_Get_FPS_Exposure_Mode SC2_Simple_Telegram


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Get_Framerate;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wStatus;                 // return status of set operation
  DWORD       dwFramerate;             // requested fram rate in mHz
  DWORD       dwExposure;              // requested exposure time in ns
  BYTE        bCks;                    // checksum byte
} SC2_Get_Framerate_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // mode to be set
  DWORD       dwFramerate;             // requested fram rate in mHz
  DWORD       dwExposure;              // requested exposure time in ns
  BYTE        bCks;                    // checksum byte
} SC2_Set_Framerate;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wStatus;                 // return status of set operation
  DWORD       dwFramerate;             // requested fram rate in mHz
  DWORD       dwExposure;              // requested exposure time in ns
  BYTE        bCks;                    // checksum byte
} SC2_Set_Framerate_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwtime_s;                  
  DWORD       dwtime_ns;
  BYTE        bCks;                    // checksum byte
}SC2_COC_Runtime_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwtime_s;                  
  DWORD       dwtime_ns;
  BYTE        bCks;                    // checksum byte
}SC2_COC_Exptime_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Trigger_Mode_Response;

#define SC2_Set_Trigger_Mode SC2_Trigger_Mode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Camera_Sync_Mode_Response;

#define SC2_Set_Camera_Sync_Mode SC2_Camera_Sync_Mode_Response
#define SC2_Get_Camera_Sync_Mode SC2_Simple_Telegram


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wReturn;
  BYTE        bCks;                    // checksum byte
} SC2_Force_Trigger_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // PIV mode 0 = off, 1 = on, others RFU
  WORD        wReserved[4];            // RFU, set to 0
  BYTE        bCks;                    // checksum byte
} SC2_Set_Fast_Timing_Mode;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // PIV mode 0 = off, 1 = on, others RFU
  WORD        wReserved[4];            // RFU, set to 0
  BYTE        bCks;                    // checksum byte
} SC2_Set_Fast_Timing_Mode_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Get_Fast_Timing_Mode;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // PIV mode 0 = off, 1 = on, others RFU
  WORD        wReserved[4];            // RFU, set to 0
  BYTE        bCks;                    // checksum byte
} SC2_Get_Fast_Timing_Mode_Response;


typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  WORD        wStatus;
  BYTE        bCks;                    // checksum byte
} SC2_Camera_Busy_Status_Response;

typedef struct
{
  WORD        wCode;                   // telegram code
  WORD        wSize;                   // telegram length
  DWORD       dwStatus;                // Status signal flags
  DWORD       dwImageCount;            // Image count of last finished image
  DWORD       dwReserved1;             // for future use, set to zero
  DWORD       dwReserved2;             // for future use, set to zero
  BYTE        bCks;                    // checksum byte
} SC2_Camera_Sensor_Signal_Status_Response;

#define SC2_Get_Camera_Sensor_Signal_Status SC2_Simple_Telegram

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wPdnMode;
  BYTE        bCks;                    // checksum byte
} SC2_Power_Down_Mode_Response;

#define SC2_Set_Power_Down_Mode SC2_Power_Down_Mode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwPdnTime;
  BYTE        bCks;                    // checksum byte
} SC2_User_Power_Down_Time_Response;

#define SC2_Set_User_Power_Down_Time SC2_User_Power_Down_Time_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wStatus;
  BYTE        bCks;                    // checksum byte
} SC2_ExpTrig_Signal_Status_Response;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wModulationMode;         // Mode for modulation (0 = modulation off, 1 = modulation on)
  DWORD       dwPeriodicalTime;        // Periodical time (unit depending on timebase) for modulation
  WORD        wTimebasePeriodical;     // timebase for periodical time for modulation  0 -> ns, 1 -> us, 2 -> ms
  DWORD       dwNumberOfExposures;     // Number of exposures during modulation
  LONG        lMonitorOffset;          // Monitor offset value
  BYTE        bCks;                    // checksum byte
} SC2_Modulation_Mode_Response;

#define SC2_Set_Modulation_Mode SC2_Modulation_Mode_Response

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wNumSignal;              // signal to query
  BYTE        bCks;                    // checksum byte
} SC2_Get_HW_IO_Signal;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wEnabled;                // Flag shows enable state of the signal (0: off, 1: on)
  WORD        wType;                   // Selected signal type
  WORD        wPolarity;               // Selected signal polarity
  WORD        wFilterSetting;          // Selected signal filter
  WORD        wSelected;               // Select signal
  BYTE        bCks;                    // checksum byte
} SC2_Get_HW_IO_Signal_Response;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wNumSignal;              // signal to query
  WORD        wEnabled;                // Flag shows enable state of the signal (0: off, 1: on)
  WORD        wType;                   // Selected signal type
  WORD        wPolarity;               // Selected signal polarity
  WORD        wFilterSetting;          // Selected signal filter
  WORD        wSelected;               // Select signal
  BYTE        bCks;                    // checksum byte
} SC2_Set_HW_IO_Signal;


//#define SC2_Set_HW_IO_Signal_Response SC2_Set_HW_IO_Signal 

  // Note:
  //  
  // The pco.dimax as well as the pco.edge do not send a SC2_Set_HW_IO_Signal_Response as
  // define above but the SC2_Get_HW_IO_Signal_Response! The wrong behaviour is implemented
  // from beginning (dimax and edge).
  // Therefore not the behaviour of the cameras will be changed, but the structure of the
  // response telegram will be changed to represent the actual behaviour!

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wEnabled;                // Flag shows enable state of the signal (0: off, 1: on)
  WORD        wType;                   // Selected signal type
  WORD        wPolarity;               // Selected signal polarity
  WORD        wFilterSetting;          // Selected signal filter
  WORD        wSelected;               // Select signal
  BYTE        bCks;                    // checksum byte
} SC2_Set_HW_IO_Signal_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       FrameTime_ns;            // Frametime replaces COC_Runtime
  DWORD       FrameTime_s;   
  DWORD       ExposureTime_ns;
  DWORD       ExposureTime_s;
  DWORD       TriggerSystemDelay_ns;   // System internal min. trigger delay
  DWORD       TriggerSystemJitter_ns;  // Max. possible trigger jitter -0/+ ... ns
  DWORD       TriggerDelay_ns;         // Resulting trigger delay = system delay
  DWORD       TriggerDelay_s;          // + delay of SetDelayExposureTime ...
  DWORD       Reserved[4];
  BYTE        bCks;                    // checksum byte
} SC2_Get_Image_Timing_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wParameter;              // Parameter (on/off)
  WORD        wTimebase;               // timebase for dwLineTime
  DWORD       dwLineTime;              // time for one line
  DWORD       dwReserved[4];           // Reserved
  BYTE        bCks;                    // checksum byte
} SC2_Set_CMOS_Line_Timing;

#define SC2_Set_CMOS_Line_Timing_Response SC2_Set_CMOS_Line_Timing

#define SC2_Get_CMOS_Line_Timing          SC2_Simple_Telegram
#define SC2_Get_CMOS_Line_Timing_Response SC2_Set_CMOS_Line_Timing

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwExposureLines;         // number of lines for Exposure
  DWORD       dwDelayLines;            // number of lines between 2 frames
  DWORD       dwReserved[4];           // Reserved
  BYTE        bCks;                    // checksum byte
} SC2_Set_CMOS_Line_Exposure_Delay;

#define SC2_Set_CMOS_Line_Exposure_Delay_Response SC2_Set_CMOS_Line_Exposure_Delay

#define SC2_Get_CMOS_Line_Exposure_Delay          SC2_Simple_Telegram
#define SC2_Get_CMOS_Line_Exposure_Delay_Response SC2_Set_CMOS_Line_Exposure_Delay



typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wNumSignal;              // signal to query
  WORD        wSelected;               // select to query (range 0 .. 3)
  BYTE        bCks;                    // checksum byte
  
} SC2_Get_HW_IO_Signal_Timing;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wNumSignal;              // signal to query
  WORD        wSelected;               // select to query (range 0 .. 3)
  DWORD       dwType;                  // type of queried signal 
  DWORD       dwParameter;             // actual selected parameter
  DWORD       dwReserved[4];           // for future use
  BYTE        bCks;                    // checksum byte
  
} SC2_Get_HW_IO_Signal_Timing_Response;

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wNumSignal;              // signal to query
  WORD        wSelected;               // select to query (range 0 .. 3)
  DWORD       dwParameter;             // actual selected parameter
  DWORD       dwReserved[4];           // for future use
  BYTE        bCks;                    // checksum byte
} SC2_Set_HW_IO_Signal_Timing;


#define SC2_Set_HW_IO_Signal_Timing_Response SC2_Get_HW_IO_Signal_Timing_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwParameter;             // Parameter (off/ ... /on)
  BYTE        bCks;                    // checksum byte
} SC2_Set_HW_LED_Signal;

#define SC2_Set_HW_LED_Signal_Response    SC2_Set_HW_LED_Signal
#define SC2_Get_HW_LED_Signal             SC2_Simple_Telegram
#define SC2_Get_HW_LED_Signal_Response    SC2_Set_HW_LED_Signal



/////////////////////////////////////////////////////////////////////
// storage control
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwRamSize;
  WORD        wPageSize;
  BYTE        bCks;                    // checksum byte
} SC2_Camera_RAM_Size_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  DWORD       dwSegment1Size;
  DWORD       dwSegment2Size;
  DWORD       dwSegment3Size;
  DWORD       dwSegment4Size;
  BYTE        bCks;                    // checksum byte
} SC2_Camera_RAM_Segment_Size_Response;

#define SC2_Set_Camera_RAM_Segment_Size SC2_Camera_RAM_Segment_Size_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Clear_RAM_Segment_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  BYTE        bCks;                    // checksum byte
} SC2_Active_RAM_Segment_Response;

#define SC2_Set_Active_RAM_Segment SC2_Active_RAM_Segment_Response



/////////////////////////////////////////////////////////////////////
// recording control
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Storage_Mode_Response;

#define SC2_Set_Storage_Mode SC2_Storage_Mode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Recorder_Submode_Response;

#define SC2_Set_Recorder_Submode SC2_Recorder_Submode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wState;
  BYTE        bCks;                    // checksum byte
} SC2_Recording_State_Response;

#define SC2_Set_Recording_State SC2_Recording_State_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Arm_Camera_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Acquire_Mode_Response;

#define SC2_Set_Acquire_Mode SC2_Acquire_Mode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Get_Acquire_Control;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Set_Acquire_Control;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Acquire_Control_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // Acquire Mode
  DWORD       dwNumberImages;          // number of Images per Sequencer  
  DWORD       dwReserved[4];           // reserved for future use
  BYTE        bCks;                    // checksum byte
} SC2_Acquire_Mode_Ex_Response;

#define SC2_Set_Acquire_Mode_Ex      SC2_Acquire_Mode_Ex_Response 
#define SC2_Get_Acquire_Mode_Ex      SC2_Simple_Telegram


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wStatus;
  BYTE        bCks;                    // checksum byte
} SC2_acqenbl_Signal_Status_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bDay;
  BYTE        bMonth;
  WORD        wYear;
  WORD        wHours;
  BYTE        bMinutes;
  BYTE        bSeconds;
  BYTE        bCks;                    // checksum byte
} SC2_Date_Time_Response;

#define SC2_Set_Date_Time SC2_Date_Time_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;
  BYTE        bCks;                    // checksum byte
} SC2_Timestamp_Mode_Response;

#define SC2_Set_Timestamp_Mode SC2_Timestamp_Mode_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wMode;                   // 0 = 
  DWORD       dwDelayImages;           //   
  BYTE        bCks;                    // checksum byte
} SC2_Record_Stop_Event_Response;

#define SC2_Set_Record_Stop_Event SC2_Record_Stop_Event_Response 
#define SC2_Get_Record_Stop_Event SC2_Simple_Telegram


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wReserved0;              // rfu, set to 0
  DWORD       dwReserved1;             // rfu, set to 0  
  BYTE        bCks;                    // checksum byte
} SC2_Stop_Record_Response;

#define SC2_Stop_Record SC2_Stop_Record_Response 


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wReserved;               // reserved for future use  
  BYTE        bCks;                    // checksum byte
} SC2_Get_Event_Monitor_Configuration;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wConfig;                 // 0 = 
  WORD        wReserved0;              //   
  WORD        wReserved1;              //   
  WORD        wReserved2;              //   
  BYTE        bCks;                    // checksum byte
} SC2_Set_Event_Monitor_Configuration;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wConfig;                 // 0 = 
  WORD        wReserved0;              //   
  WORD        wReserved1;              //   
  WORD        wReserved2;              //   
  BYTE        bCks;                    // checksum byte
} SC2_Event_Monitor_Configuration_Response;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wIndex;                  // index for reading a complete list
  WORD        wReserved;               //   
  BYTE        bCks;                    // checksum byte
} SC2_Get_Event_List;


typedef struct
{
  DWORD  dwImageNumber;              // Number of Image (same as for ReadImage command!)
  BYTE   bEVENT_TIME_US_BCD[3];      // 0x000000 to 0x999999, where first byte is least significant byte
  BYTE   bEVENT_TIME_SEC_BCD;        // 0x00 to 0x59
  BYTE   bEVENT_TIME_MIN_BCD;        // 0x00 to 0x59
  BYTE   bEVENT_TIME_HOUR_BCD;       // 0x00 to 0x23
  BYTE   bEVENT_TIME_DAY_BCD;        // 0x01 to 0x31  
  BYTE   bEVENT_TIME_MON_BCD;        // 0x01 to 0x12
  BYTE   bEVENT_TIME_YEAR_BCD;       // 0x00 to 0x99 only last two digits, 2000 has to be added
  BYTE   bFiller;                    
  WORD   wEventMask;                 // which events occured, see also Mode parameter of  Set Event
} SC2_EVENT_LIST_ENTRY;              //   Monitor Configuration


typedef struct
{
  WORD        wCode;                    // telegram code 
  WORD        wSize;                    // telegram length
  WORD        wIndex;                   // index for reading a complete list
  WORD        wMaxEvents;               // max. size of event list (entries) (Camera feature)
  WORD        wValidEvents;             // current number of events in list (total)
  WORD        wValidEventsInTelegram;   // valid number of events in this response telegram! 

  SC2_EVENT_LIST_ENTRY   strEvent[8];  // 8 events per call

  BYTE        bCks;                    // checksum byte
} SC2_Get_Event_List_Response;


/////////////////////////////////////////////////////////////////////
// image read commands
/////////////////////////////////////////////////////////////////////

typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  WORD        wRes_hor;
  WORD        wRes_ver;
  WORD        wBin_x;
  WORD        wBin_y;
  WORD        wRoi_x0;
  WORD        wRoi_y0;
  WORD        wRoi_x1;
  WORD        wRoi_y1;
  BYTE        bCks;                    // checksum byte
} SC2_Segment_Image_Settings_Response;

// Note: was formerly: SC2_Image_Settings_related_to_Segment_Response;


typedef struct                        // Structure for telegram
{
  WORD        wCode;                // command code
  WORD        wSize;                 // length of command
  WORD        wSegment;
  BYTE        bCks;                    // checksum byte
} SC2_Segment_Image_Settings;


// Note: was formerly: SC2_Image_Settings_related_to_Segment;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  DWORD       dwValid;
  DWORD       dwMax;
  BYTE        bCks;                    // checksum byte
} SC2_Number_of_Images_Response;


typedef struct                         // Structure for telegram
{
  WORD        wCode;                   // command code
  WORD        wSize;                   // length of command
  WORD        wSegment;
  BYTE        bCks;                    // checksum byte
} SC2_Number_of_Images;


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        wSegment;
  DWORD       dwStartImage; 
  DWORD       dwLastImage; 
  BYTE        bCks;                    // checksum byte
} SC2_Read_Images_from_Segment_Response;

#define SC2_Read_Images_from_Segment SC2_Read_Images_from_Segment_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  BYTE        bCks;                    // checksum byte
} SC2_Request_Image_Response;

#define SC2_Request_Image SC2_Request_Image_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        Reserved[4];             // reserved for future use, set to 0!
  BYTE        bCks;                    // checksum byte
} SC2_Repeat_Image_Response;

#define SC2_Repeat_Image SC2_Repeat_Image_Response


typedef struct
{
  WORD        wCode;                   // telegram code 
  WORD        wSize;                   // telegram length
  WORD        Reserved;                // reserved for future use, set to 0!
  BYTE        bCks;                    // checksum byte
} SC2_Cancel_Image_Transfer_Response;

#define SC2_Cancel_Image_Transfer SC2_Cancel_Image_Transfer_Response


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wAlignment;          // bit alignment
  BYTE        bCks;                // checksum byte
} SC2_Bit_Alignment_Response;

#define SC2_Set_Bit_Alignment SC2_Bit_Alignment_Response 
#define SC2_Get_Bit_Alignment SC2_Simple_Telegram


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  BYTE        bCks;                // checksum byte
} SC2_Get_Metadata_Mode;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wMode;               // mode 0x0000 = w/o, 0x0001 w. metadata
  WORD        wReserved1;          // RFU, set to 0x0000
  WORD        wReserved2;          // RFU, set to 0x0000
  BYTE        bCks;                // checksum byte
} SC2_Set_Metadata_Mode;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wMode;               // mode 0x0000 = w/o, 0x0001 w. metadata
  WORD        wReserved1;          // RFU, set to 0x0000
  WORD        wReserved2;          // RFU, set to 0x0000
  WORD        wMetadataSize;       // size in byte = size in pixel
  WORD        wMetadataVersion;    // version of the metadata
  BYTE        bCks;                // checksum byte
} SC2_Metadata_Mode_Response;

#define PCO_METADATA_VERSION         0x0001     // current version!


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wReserved;           // RFU, set to 0
  BYTE        bCks;                // checksum byte
} SC2_Get_Color_Settings;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  SHORT       sSaturation;         // Saturation from -100 to 100, 0 is default
  SHORT       sVibrance;           // Vibrance   from -100 to 100, 0 is default
  WORD        wColorTemp;          // Color Temperature from 2000 t0 20000 K
  SHORT       sTint;               // Tint       from -100 to 100, 0 is default
  WORD        wMulNormR;           // for  setting color ratio (when not using Color
  WORD        wMulNormG;           //   Temp. and Tint! 1000 corresponds to 1.0
  WORD        wMulNormB;           //   normalized: wMulNorm(R + G + B) / 3 = 1000!
  SHORT       sContrast;           // Contrast   from -100 to 100, 0 is default
  WORD        wGamma;              // Gamma * 0.01 from 40 to 250 => 0.40 to 2.5
  WORD        wSharpFixed;         // 0 = off, 100 = max.
  WORD        wSharpAdaptive;      // 0 = off, 100 = max.
  WORD        wScaleMin;           // 0 to 4095
  WORD        wScaleMax;           // 0 to 4095
  WORD        wProcOptions;        // Processing Options as bit mask
  WORD        wReserved1;    
  WORD        wReserved2;    
  WORD        wReserved3;    
  BYTE        bCks;                // checksum byte
} SC2_Set_Color_Settings;

#define SC2_Get_Color_Settings_Response   SC2_Set_Color_Settings
#define SC2_Set_Color_Settings_Response   SC2_Set_Color_Settings


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
  WORD        wMode;               // 0x0001 = do white balance on next transmitted image
                                   // other values reserved for future use

  WORD        wParam[4];           // not used now, meaning will depend on wMode, set to 0x0000!

  BYTE        bCks;                // checksum byte
} SC2_Do_White_Balance;


typedef struct
{
  WORD        wCode;               // command code
  WORD        wSize;               // length of command
